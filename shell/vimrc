" Luke Smith vimrc -> https://github.com/LukeSmithxyz/voidrice/blob/archi3/.config/nvim/init.vim
" Minimal .vimrc for C/C++ Developers -> https://gist.github.com/rocarvaj/2513367

set nocompatible
filetype off
set background=dark

"" Spell Checking
autocmd BufRead,BufNewFile *.md,*.tex setlocal spell
set complete+=kspell
set clipboard=unnamedplus


" Making sure the vundle settings are working accordingly
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" List of our packages

Plugin 'gmarik/Vundle.vim'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'jiangmiao/auto-pairs'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'dkarter/bullets.vim'

call vundle#end()

"filetype indent on
syntax on
syntax enable
set t_Co=256
set autoindent
set smartindent
"autocmd FileType vim let b:vcm_tab_complete = 'vim'

autocmd BufRead,BufNewFile * setlocal tabstop=2 shiftwidth=2
" :set tabstop=2 shiftwidth=2 expandtab | retab  
set expandtab
set number 
set encoding=utf-8 
set termencoding=utf-8

set showmatch
set incsearch

"set comments=sl:/*,mb:\ *,elx:\ */

" Moving through the files
inoremap <S-Tab> <C-d>
nnoremap <S-Tab> <<
inoremap <Tab> <C-t>
nnoremap <Tab> >>

"This is so I can have proper copy pasting format

let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

" Text Processing

" Wrapping text around a word or phrase --> https://superuser.com/questions/875095/adding-parenthesis-around-highlighted-text-in-vim

" PROGRAMMING

" CPP
" These were inspired by Luke Smith's LaTeX scripts found below

" External header
autocmd FileType cpp,hpp inoremap ,eh #include <<++>><ESC>i
" Local header
autocmd FileType cpp,hpp inoremap ,lh #include "<++>"<ESC>i
autocmd FileType cpp,hpp inoremap ,t template <typename T><Enter><ESC>i
autocmd FileType markdown inoremap ,s ```<++><Enter>```<Enter><ESC>i

" Make run from Vim (gcc, clang, jcomp, pdflatex)

set autowrite
autocmd FileType c,cpp nnoremap <buffer> <C-c> :!clear && c_lang_make_run % <Enter>
autocmd FileType tex nnoremap <buffer> <C-c> :!make_run_latex "%" <Enter>
autocmd FileType java nnoremap <buffer> <C-c> :!clear && jcomp % <Enter>
autocmd FileType python nnoremap <buffer> <C-c> :!clear && chmod +x "%" && python % <Enter>
autocmd FileType html nnoremap <buffer> <C-c> :!firefox % & disown <Enter>
autocmd FileType php nnoremap <buffer> <C-c> :!clear && php % <Enter>
autocmd FileType rmd,markdown nnoremap <buffer> <C-c> :!clear && compile_markdown % <Enter>
autocmd FileType rmd nnoremap <buffer> <C-c> :!clear && compile_r_markdown % <Enter>
autocmd FileType r nnoremap <buffer> <C-c> :!clear && r_stat_run % <Enter>
autocmd FileType cs nnoremap <buffer> <C-c> :!clear && c_sharp_compile % <Enter>
autocmd FileType text nnoremap <buffer> <C-c> :! clear && compile_plain_text % <Enter>

" Export code to PDF with syntax highlighting
autocmd FileType c,cpp,python,bash,zsh nnoremap <buffer> <C-e> :! clear && csrc % <Enter>
" Push to Github directly from a vim buffer
" nnoremap <C-g> :!github_push % <Enter>

" Run commands for certain files when saved
autocmd BufWritePost ~/.Xresources !xrdb ~/.Xresources
autocmd BufWritePost ~/.zshrc !source ~/.zshrc

"Autocomplete for programming languages
" Bundle 'Valloric/YouCompleteMe'
" let g:ycm_autoclose_preview_window_after_completion=1
" map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
" let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/.ycm_extra_conf.py'

let g:pymode_options_colorcolumn = 0


" WORD PROCESSING

" LaTeX

" Navigating with guides
inoremap <leader><leader> <Esc>/<++><Enter>"_c4l
vnoremap <leader><leader> <Esc>/<++><Enter>"_c4l
map <leader><leader> <Esc>/<++><Enter>"_c4l

inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

filetype plugin on
autocmd FileType tex,rmd,markdown exec("setlocal dictionary+=".$HOME."/.vim/dictionaries/".expand('<amatch>'))
set completeopt=menuone,longest,preview
set complete+=k
