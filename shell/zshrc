# colors, all the colors!
red="\033[1;31m"
GREEN="\033[1;32m"
BLUE="\033[1;34m"
NOCOLOR="\033[0m"

# NO HISTORY SHARING, FUCKING ANNOYING
setopt no_share_history

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/home/jared/.oh-my-zsh"
alias ls='ls --color=auto'

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
 DISABLE_AUTO_TITLE="false"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git reminder)

source $ZSH/oh-my-zsh.sh
case "$TERM" in
	rxvt|*term)
		PROMPT_COMMAND='echo -ne "\033]0;$PWD\007"'
	;;
esac

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
 if [[ -n $SSH_CONNECTION ]]; then
   export EDITOR='vim'
 else
   export EDITOR='vim'
 fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Small repetitive commands
rm -r ~/.zcompdump*
git config --global credential.helper 'cache --timeout=3600'

# Exports
export PAGER="most"
export ZSH_THEME="common"
PATH=$PATH$(find "$HOME/scripts" -type d -not -path '*/\.*' -printf ":%p")
export PATH="/home/jared/.ebcli-virtual-env/executables:$PATH"
# BEGIN PERSONAL EDITS #


# Functions and aliases

#alias x="xdg-open . > /dev/null 2>&1 & disown"



# defined functions that would not fit in a simple alias command
prompt_context() {}

function respring_iphone() {
	tcprelay -t 22:2222 &
	ssh root@localhost 'killall -9 SpringBoard'
	killall tcprealy
}


function bak_pref() {
	prev="$PWD"
	[[ -d ~/Projects/dotfiles ]] || exit
	# shell
	cp -ar ~/.zshrc ~/Projects/dotfiles/shell/zshrc
	cp -ar ~/.vimrc ~/Projects/dotfiles/shell/vimrc

	# terminal

	cp -ar ~/.Xresources ~/Projects/dotfiles/terminal/Xresources

	# terminal applications

	cp -ar ~/.config/ranger/rc.conf ~/Projects/dotfiles/ranger
	cp -ar ~/.config/ranger/rifle.conf ~/Projects/dotfiles/ranger

	cd ~/Projects/dotfiles
	echo ""$BLUE"Project: dotfiles"$NOCOLOR""
	git add *
	git commit -m "Automatic backup performed"
	git push origin master
	echo "$BLUE""Project: scripts"$NOCOLOR""
	cd ~/scripts
	git add *
	git commit -m "Automatically backing up scripts"
	git push origin master
	cd "$prev"
}


export RANGER_LOAD_DEFAULT_RC=false
VISUAL=editor; export VISUAL EDITOR=vim; export EDITOR
export SPOTIPY_CLIENT_ID='d2697e8198c449f09abd2e0833f48dff'
export SPOTIPY_CLIENT_SECRET='862367c3080d49e782de1bd74641b876'
export SPOTIPY_REDIRECT_URI='http://localhost:8888'


# restart cinnamon if it is acting up
alias rc="sudo systemctl restart lightdm.service"

CURRENT=$(date +"%d %B %Y")


# all things related to writing documents

function nblog(){
	current_for_jekyll="$(date +%Y-%m-%d-)"
	[[ -z "$1" ]] && (echo "[-] Provide name for blog";exit)
	name=$(printf "$current_for_jekyll" && sed -e 's/\(.*\)/\L\1/;s/\ /-/g' <<< "$1")
	real="$(realpath ~/Projects/website/_posts/"$name".md)"
	cp -ar ~/Projects/university/LaTeX\ Templates/blog_template.md "$real"
	sed -i 's/title.*/title\:\t'$1'/g' "$real" 
	vim ~/Projects/website/_posts/"$name".md
	# https://github.com/monostream/tifig/releases
	# https://gist.github.com/bittercoder/f6601784ebe4f63e9b9e037e3344b960
}

# new article
function nmla() {
	[[ -z "$1" ]] && (echo "[-] Provide name for article";exit)
	if [[ ! -f "$1" ]]; then
		cp -ar ~/Projects/university/LaTeX\ Templates/MLA_Template.tex ./"$1".tex
		perl -i -pe "s/.*/$1/ if $.==62;s/CURRENT\ DATE/$CURRENT/" "$1".tex
	else
		vim "$1".tex
	fi
}

function napa(){
	[[ -z "$1" ]] && (echo "[-] Provide name for article";exit)
	cp -ar ~/Projects/university/LaTeX\ Templates/APA_Template.tex ./"$1".tex
	perl -i -pe "s/.*/\\\title\{"$1"\}/ if $.==55" ./"$1".tex
	vim "$1".tex
}


function nmemo(){
	[[ -z "$1" ]] && exit
	cp -ar ~/Projects/university/LaTeX\ Templates/{memo.tex,texMemo.cls} .
	mv memo.tex "$1".tex
	vim "$1".tex
}
function git_helper() {
	cd "$1"
	git config --unset core.bare
	git add *
	git commit -m "Automated backup"
	git push origin master
}
function full_bak() {
	# this script is meant to facilitate backups that can be automated
	# TODO
	# Migrate all git repos to ~/Projects [CHECK]
	# Integrate bak_pref [CHECK]
	# Write documentation about this process []
	# Go through External and delete all unecessary files [] (Please try to make the total size no more than 128 GB. This is a goal that should be attained but not mandatory. It is an incentive to delete more unecessary crap)

	# 

	find ~/Projects -name '\.git' | while read repository; do
		l=$(echo "$repository" | sed 's/\.git//')
		echo ""$BLUE"Project: $(basename $l)"$NOCOLOR""
		echo "true" >> /tmp/full_bak_flag
		find "$l" -type f -not -path '*/\.git/*' | while read file; do
			size=$(stat --printf="%s" "$file")
			! [[ "$size" =~ '^[0-9+$]' ]] && break
			[[ "$size" -ge 100000000 ]] && (sed -i 's/true/false/g' /tmp/full_bak_flag;echo "$file" >> "$repository"/"$(basename "$l").log")
		done
		[[ "$(head -n 1 /tmp/full_bak_flag)" == "true" ]] &&  (echo "$GREEN""This repo can be committed and sent to Github""$NOCOLOR";git_helper "$(dirname $repository)") || (echo "$RED""Cannot commit because of files being too large. Please see $repository/$(basename "$l").log""$NOCOLOR")
		truncate -s 0 /tmp/full_bak_flag
	done
	bak_pref
}
set -g xterm-keys on

# remove duplicates
function rd() {	[[ -f "$1" ]] && (cat "$1" | awk '!seen[$0]++') || (echo "$1" | awk '!seen[$0]++') }

# check drive size
function chd() {
	[[ "$(whoami)" != "root" ]] && (echo "[-] Run as root";exit)
	# $1 -> current size (automate via path given)
	# $2 -> path to drive (see what I mean ^)
	dd if=/dev/random bs=1M count count="$1" of=randomfile
	dd if=randomfile of="$2"
	first="$(dd if=randomfile | sha256)"
	second="$(dd if="$2" | sha256)"
	[[ "$first" == "$second" ]] && (echo "[+] Drive is the size it claims to be") || (echo "[-] Drive is not the size it claims to be")
}
function mount_vmware() {
	# found going through old photos of tweets
	[[ ! -d "/tmp/vmware_mount" ]] && sudo mkdir -p /tmp/vmware_mount
	[[ ! -f "$1" || -z "$@" ]] && exit
	sudo mount "$1" /tmp/vmware_mount -o ro,loop=/dev/loop1,offset=32768 -t ntfs
}
function meme_template() {
	# adapted from a climagic tweet <3
	TOP="$2"
	BOTTOM="$3"
	[[ ! -f "$1" || -z "$@" ]] && exit
	convert "$1" -font Ubuntu -fill white -pointsize 48 -stroke black -strokewidth 2 -gravity north -annotate 0 "$TOP" -gravity south -annotate 0 "$BOTTOM" outputmeme
}

function batt_drain() {
	[[ "$(whoami)" != "root" ]] && (echo "[-] Run as root";exit)
	stress --cpu 4 --io 2 -vm2 --vm-bytes 128M
}

function slide_show(){ feh -F -D90 --recursive --randomize --auto-zoom ~/Pictures }
function clone_drive { rsync -av --delete /media/jared/New\ External/* /media/jared/Long\ Term/ }

# find directories that contain certain types of files
#function find_type_dir{ find . -name ".*$1" | sed 's/\/[^\/]*$//' | sort | uniq }
# Chaining multiple "grep commands" using one line in AWK
# awk '/a/ && /b/ && ! /c/ && /d/' --> grep 'a' | grep 'b' | grep -v 'c' | grep 'd'

# sudo apt-get install intel-microcode microcode.ctl -y
source /home/jared/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# ALIASES #

## NAVIGATION ##

alias gh="cd ~"
alias ga="cd ~/Applications"
alias gai="cd ~/Applications/Cydia\ Impactor"
alias cdd="cd ~/Desktop"

function cdds(){
	goto="$HOME/Desktop"
	#cd "$HOME"/Desktop
	#find -L . -maxdepth 1 -type d | while read line; do 
		#[[ "$(echo "$line" | egrep '[Fall|Spring] [0-9]{4}')" ]] && goto="$line"
	#	echo "$line"
	#done
	cd ~/Desktop/Fall\ 2019
}

alias gu="cd ~/Projects/university"
alias ge="cd /media/"$USER"/External\ New"

alias gu="cd ~/Projects/university"
alias gus="cd ~/Projects/university/scripts"
alias ge="cd /media/"$USER"/External\ New"

alias gp="cd ~/Projects"
alias gpb="cd ~/Projects/backed-development"
alias gpw="cd ~/Projects/website"

alias us="cp -ar /usr/lib/python3/dist-packages/starbucksautoma/* ~/Projects/starbucks_automa_production/src/usr/lib/python3/dist-packages/starbucksautoma/"

alias ue="umount /media/"$USER"/External\ New && sleep 3 && notify-send 'You can now unplug External New'"
alias ua="umount /media/"$USER"/*"
alias sz="source ~/.zshrc"
alias lg="sudo find "$HOME" -type d -name '.git'"
alias zrc="vim ~/.zshrc"
alias vrc="vim ~/.vimrc"
alias vx="vim ~/.Xresources"
alias ut="uptime -p"
alias up="sudo apt-get update && sudo apt-get upgrade -y"
alias bu="rsync -av --delete /media/jared/External\ New/* /media/jared/External"
alias rs="Rscript"
alias jsc="shutter -f -o java_screenshot.png > /dev/null 2>&1 & disown"
alias sl="ls"
alias gs="cd ~/scripts"

# Spotify API Credentials

export SPOTIFY_SECRET_KEY="84c1c81be6f347629bf01b97fbbe883c"
export SPOTIFY_AUTHENTICATOR_CLIENT_ID="e1f239ec0ee443689d6786fd3f397af1"
export SPOTIFY_AUTHENTICATOR_CLIENT_SECRET="cbecd4d200f8482d910cb1db77d6f10c"
